---


#-- 02A - Import - call very specific tasks from another file in a very specific order - METHOD 1 - using tags
#-- 02B - Import - call very specific tasks from another file in a very specific order - METHOD 2 - using when conditionals
#-- 02C - Import - call very specific tasks from another file in a very specific order - using tags AND when conditionals
#-- 02D - Import - call very specific tasks from another file in a very specific order - using conditional tags
#-- 03  - Defining a tag just once for all tasks in the file using a block
#-- P04  - include_tasks key points todo
#-- P05  - include_tasks functionality and running specific tasks in a very specific order
#-- P06  - Difference between variable and set_fact todo
#-- P07  - How to use set_fact module
#-- P08  - Debugging
#-- P09  - Using the vars dir in the role

# --------------------------------------------------------------------------------


- hosts: all

  tasks:

    # In this case, ALL THE TASKS defined in path/to/tasks_file.yml will be executed as part of the current play.
    # The imported tasks are effectively inlined and treated as if they were part of the original tasks list.
    - import_tasks: path/to/tasks_file.yml


--------------------------------------------------------------------------------

The difference between the two examples you provided lies in the scope and precedence of the variables being set.

set_fact:

set_fact is used to set a fact (variable) at the host level or the play level.
The fact set using set_fact is available for the rest of the play or playbook.
In your example, tasks_file_name is set to "apt_pkg_tasks.yml" at the host level, which means this value will be available for all tasks within the current play.
vars:

vars is used to define variables at the play level or role level.
Variables defined under vars have a higher precedence than variables defined in other places (like inventory files or role defaults).
In your example, tasks_file_name is set to "debug_usage.yml" at the play level, overriding any other value for tasks_file_name defined elsewhere.
When to use set_fact or vars depends on your specific use case and the scope you need for the variables:

Use set_fact:

When you need to dynamically set a variable based on the output of a task or some conditional logic.
When you want to set a variable at the host level, and have it available for the rest of the play or playbook.
Use vars:

When you have a predefined set of variables that you want to use throughout a play or role.
When you want to override variables defined in other places (like inventory files or role defaults) with higher precedence.
In general, it's recommended to use vars for defining variables that are known beforehand and set_fact for dynamically setting variables based on task output or conditional logic.

Here's an example that illustrates the difference:

- hosts: all
  vars:
    tasks_file_name: "debug_usage.yml"

  tasks:
    - name: Set tasks_file_name using set_fact
      set_fact:
        tasks_file_name: "apt_pkg_tasks.yml"

    - name: Import tasks from the file defined in vars
      import_tasks: "{{ tasks_file_name }}"

    - name: Set tasks_file_name using set_fact again
      set_fact:
        tasks_file_name: "another_tasks_file.yml"

    - name: Import tasks from the file set using set_fact
      import_tasks: "{{ tasks_file_name }}"
In this example:

The vars section sets tasks_file_name to "debug_usage.yml".
The first set_fact task overrides tasks_file_name to "apt_pkg_tasks.yml".
The second import_tasks uses the value set by set_fact ("apt_pkg_tasks.yml").
The second set_fact task changes tasks_file_name to "another_tasks_file.yml".
The third import_tasks uses the new value set by the second set_fact ("another_tasks_file.yml").

--------------------------------------------------------------------------------

#-- 02A - Import - call very specific tasks from another file in a very specific order - METHOD 1 - using tags

# update_tasks.yml

- name: Task 1 - Update apt cache
  apt:
    update_cache: yes
  tags:
    - task_1

- name: Task 2 - Install packages
  apt:
    name: nginx
    state: present
  tags:
    - task_2

- name: Task 3 - Upgrade system
  apt:
    upgrade: dist
  tags:
    - task_3

# main.yml

- name: Call Task 1 from update_tasks.yml
  include_tasks: update_tasks.yml
  tags: task_1

- name: Call Task 3 from update_tasks.yml
  include_tasks: update_tasks.yml
  tags: task_3

- name: Call Task 2 from update_tasks.yml
  include_tasks: update_tasks.yml
  tags: task_2


# --------------------------------------------------------------------------------

#-- 02B - Import - call very specific tasks from another file in a very specific order - METHOD 2 - using when conditionals

# main.yml

- name: Call specific tasks from update_tasks.yml
  ansible.builtin.include_tasks: update_tasks.yml
  vars:
    run_task_1: true
    run_task_2: false
    run_task_3: true

# update_tasks.yml

- name: Task 1 - Update apt cache
  apt:
    update_cache: yes
  when: run_task_1 | bool

- name: Task 2 - Install packages
  apt:
    name: nginx
    state: present
  when: run_task_2 | bool

- name: Task 3 - Upgrade system
  apt:
    upgrade: dist
  when:                             # OR condition below
    - v_run_task_3 == "yes"
    - v_which_task == "IS4-22"


# --------------------------------------------------------------------------------

#-- 02C - Import - call very specific tasks from another file in a very specific order - using tags AND when conditionals

Tag Evaluation:
When you run an Ansible playbook with --tags, it will attempt to run any tasks that match those tags REGARDLESS of the when condition.
If a task is tagged, it is considered for execution if the specified tag is passed, even if the when condition evaluates to false.

When Condition:
The when condition only controls whether the task itself is executed AFTER it has been selected to run based on tags.
If the when condition evaluates to false, the task will be skipped, but it will still be considered for execution based on its tag.


Example - 
In your file_management.yml, if you have a task like this:

- name: copy 100
  copy:
    src: /etc/hostname
    dest: /tmp/
    mode: 0755
    backup: yes 
  when: v_fm_copy_1 | default(false)
  tags:
    - k8_change

When you run the playbook with --tag k8_change :
1 - the "copy 100" task will be SELECTED FOR EXECUTION as it has the tag k8_change 
2 - now it will check if v_fm_copy_1 evaluates to false and won't run if so and will be SKIPPED (but it is still "considered" to have been executed in the context of the tag)

one solution is to use CONDITIONAL TAGS like below


# --------------------------------------------------------------------------------

#-- 02D - Import - call very specific tasks from another file in a very specific order - using conditional tags

# You can conditionally apply tags based on the when condition, example below - 

- name: copy 100
  copy:
    src: /etc/hostname
    dest: /tmp/
    mode: 0755
    backup: yes 
  when: v_fm_copy_1 | default(false)
  tags:
    - "{{ 'k8_change' if v_fm_copy_1 else '' }}"

NOTES - 

Task Inclusion: When you use include_tasks, all tasks in the included file are executed unless they are skipped based on their tags or when conditions. However, if the included file has tasks with no conditions (or conditions that evaluate to true), those tasks will run regardless of the tags specified in the main playbook.

Task Tags and Inheritance: Tasks do inherit the tags from the include_tasks statement, but if tasks do not have specific tags set, they can still execute if included, unless explicitly skipped.

Order of Execution: When a playbook runs, it processes the tasks in the order they are defined. If a task is included, all tasks in that file are evaluated unless filtered out by tags or conditions.

# --------------------------------------------------------------------------------

#-- 03  - Defining a tag just once for all tasks in the file using a block

- block:

  - name: task 1
  
  - name: task 2
  
  - name: task 3

  tags:
    - print_action                          # Applies to all tasks within the block


# **BUT VERY IMPORTANT BELOW **
# If you have a block tagged with print_action and it contains three tasks (let's say task A, task B, and task C), all three will run if you run the playbook with --tags print_action, 
# EVEN IF tasks A and C do not have any tags of their own.
# If task B has the tag k8_install_phase_2A-append_to_hosts_file, and you run the playbook with that tag, only task B will execute.
# so i dont know if having a block section for my use cases has any value at all

# --------------------------------------------------------------------------------

#-- 04  - include_tasks key points todo

INCLUDE_TASKS


Key Points

    Tag Propagation: When you include a task file using include_tasks, all tasks within that included file are processed. If no specific tags are set on the included task, it may execute all tasks from that file, irrespective of the tags defined in the main playbook.

    No Tags Defined: If the included task file (debug_usage.yml) does not have tags for its internal tasks, they will execute regardless of what tags you specify in the main.yaml.

    Default Behavior: By default, if you don't specify tags when calling a playbook, all tasks will run unless you restrict them using tags.

# --------------------------------------------------------------------------------






# --------------------------------------------------------------------------------

#-- 03  - Defining a tag just once for all tasks in the file using a block

- block:

  - name: task 1
  
  - name: task 2
  
  - name: task 3

  tags:
    - print_action                          # Applies to all tasks within the block


# **BUT VERY IMPORTANT BELOW **
# If you have a block tagged with print_action and it contains three tasks (let's say task A, task B, and task C), all three will run if you run the playbook with --tags print_action, 
# EVEN IF tasks A and C do not have any tags of their own.
# If task B has the tag k8_install_phase_2A-append_to_hosts_file, and you run the playbook with that tag, only task B will execute.
# so i dont know if having a block section for my use cases has any value at all

# --------------------------------------------------------------------------------

#-- 04  - include_tasks key points todo

INCLUDE_TASKS

Key Points

    Tag Propagation: When you include a task file using include_tasks, all tasks within that included file are processed. If no specific tags are set on the included task, it may execute all tasks from that file, irrespective of the tags defined in the main playbook.

    No Tags Defined: If the included task file (debug_usage.yml) does not have tags for its internal tasks, they will execute regardless of what tags you specify in the main.yaml.

    Default Behavior: By default, if you don't specify tags when calling a playbook, all tasks will run unless you restrict them using tags.

# --------------------------------------------------------------------------------




# --------------------------------------------------------------------------------

#-- 03  - Defining a tag just once for all tasks in the file using a block

- block:

  - name: task 1
  
  - name: task 2
  
  - name: task 3

  tags:
    - print_action                          # Applies to all tasks within the block


# **BUT VERY IMPORTANT BELOW **
# If you have a block tagged with print_action and it contains three tasks (let's say task A, task B, and task C), all three will run if you run the playbook with --tags print_action, 
# EVEN IF tasks A and C do not have any tags of their own.
# If task B has the tag k8_install_phase_2A-append_to_hosts_file, and you run the playbook with that tag, only task B will execute.
# so i dont know if having a block section for my use cases has any value at all

# --------------------------------------------------------------------------------

#-- P04  - include_tasks key points todo

INCLUDE_TASKS

Key Points

    Tag Propagation: When you include a task file using include_tasks, all tasks within that included file are processed. If no specific tags are set on the included task, it may execute all tasks from that file, irrespective of the tags defined in the main playbook.

    No Tags Defined: If the included task file (debug_usage.yml) does not have tags for its internal tasks, they will execute regardless of what tags you specify in the main.yaml.

    Default Behavior: By default, if you don't specify tags when calling a playbook, all tasks will run unless you restrict them using tags.

# --------------------------------------------------------------------------------
#-- P05  - include_tasks functionality and running specific tasks in a very specific order
---
# test_main.yml

- hosts: all
  gather_facts: yes
  become: true

  vars:
    # v_is1_03_ip06: true
    # v_is1_01_hostinfo: true
    xxxxv_is2_04_ip6info: true
    # v_is2_01_cpuinfo: true

  tasks:

    # First inclusion for IS1-03
    - name: Run task IS1-03 first
      ansible.builtin.include_tasks: ../../server_configure/tasks/include_sample_1.yml
      vars:
        v_run_task: "IS1-03"

    # Second inclusion for IS1-01
    - name: Run task IS1-01 second
      ansible.builtin.include_tasks: ../../server_configure/tasks/include_sample_1.yml
      vars:
        v_run_task: "IS1-01"
    
    - name: Run task IS2-04 first
      ansible.builtin.include_tasks: ../../server_configure/tasks/include_sample_2.yml
      vars:
        v_run_task: "IS2-04"

    - name: Run task IS2-01 first
      ansible.builtin.include_tasks: ../../server_configure/tasks/include_sample_2.yml
      vars:
        v_run_task: "IS2-01"

#-- ansible.cfg
display_skipped_hosts = false

# when we run test_main.yaml, it will only run the SPECIFIC tasks required. and that too in VERY SPECIFIC ORDER

---
# include_sample_1.yml

- name: Setting fact for include_sample_1.yml
  ansible.builtin.set_fact:
    f_this_file_name: "include_sample_1.yml"

- name: "{{ f_this_file_name }} | IS1-01 - Print some remote host name information"
  debug:
    msg: "a-hostname={{ ansible_hostname }}  a-fqdn={{ ansible_fqdn }}  a-nodename={{ ansible_nodename }}"
  #when: v_is1_01_hostinfo is defined and v_is1_01_hostinfo
  when: v_run_task == "IS1-01"
  # tags:
  #   - t_is1_show_hostinfo

- name: "{{ f_this_file_name }} | IS1-02 - Display total RAM"
  debug:
    msg: "Total RAM is {{ ansible_memory_mb.real.total }} MB"
  #when: v_is1_02_ram is defined and v_is1_02_ram
  when: v_run_task == "IS1-02"
  # tags:
  #   - t_is1_show_ram

- name: "{{ f_this_file_name }} | IS1-03 - Display IPv4 addresses"
  debug:
    msg: "IPv4 Addresses: {{ ansible_all_ipv4_addresses | default([]) }}"
  #when: v_is1_03_ip06 is defined and v_is1_03_ip06
  when: v_run_task == "IS1-03"
  # tags:
  #   - t_is1_show_ip4

---
# include_sample_2.yml

- name: Setting fact for include_sample_2.yml
  ansible.builtin.set_fact:
    f_this_file_name: "include_sample_2.yml"

- name: "{{ f_this_file_name }} | IS2-01 - Display CPU information"
  debug:
    msg: "Architecture: {{ ansible_architecture }} | CPU core(s): {{ ansible_processor_cores }} | VCPUs: {{ ansible_processor_vcpus }}"
  #when: v_is2_01_cpuinfo is defined and v_is2_01_cpuinfo
  when: v_run_task == "IS2-01"


- name: "{{ f_this_file_name }} | IS2-02 -Get disk utilization information for /home"
  command: df -PTh /home
  register: filesystem_info
  #when: v_is2_02_diskinfo is defined and v_is2_02_diskinfo
  when: v_run_task == "IS2-02"

- name: "{{ f_this_file_name }} | IS2-03 - Display disk utilization information"
  debug:
    var: filesystem_info.stdout_lines
  #when: v_is2_02_diskinfo is defined and v_is2_02_diskinfo
  when: v_run_task == "IS2-02"   #linked with above task

- name: "{{ f_this_file_name }} | IS2-04 - Display IPv6 addresses"
  debug:
    msg: "IPv6 Addresses: {{ ansible_all_ipv6_addresses | default([]) }}"
  #when: v_is2_04_ip6info is defined and v_is2_04_ip6info
  when: v_run_task == "IS2-04"


# --------------------------------------------------------------------------------
#-- P06  - Difference between variable and set_fact todo

Differences Between Variables and set_fact
Aspect	Variable	set_fact
Scope	Scope is limited to the playbook or inventory where it's defined. It is static unless you modify the variable at the playbook level.	The fact persists for the duration of the playbook run and can be accessed in subsequent tasks.
Usage	Use vars: to define variables. These are fixed until redefined.	Use set_fact to define dynamic facts that can change during the playbook execution.
Persistence	Variables are static and do not change unless explicitly modified in the playbook.	Facts can be updated during the playbook execution, and changes will be reflected in subsequent tasks.
Execution	Variables are typically defined once and remain constant.	set_fact can be executed at any point, allowing for conditional logic to change the values dynamically.
Pros and Cons
Using Variables

Pros:

    Simplicity: Easier to read and understand.
    Performance: Slightly more efficient, as it doesn't involve creating a new fact.
    Static Nature: If you need constant values, defining them as variables is straightforward.

Cons:

    Limited flexibility: Variables cannot change their value once set in the playbook unless you redefine them.

Using set_fact

Pros:

    Flexibility: Can change based on conditions within the playbook. This is particularly useful in complex playbooks where the value might need to be adjusted based on previous task results.
    Accessibility: set_fact makes variables accessible in any subsequent task.

Cons:

    Complexity: May make the playbook slightly more complex, especially for simple tasks where a static variable would suffice.
    Overhead: Slightly more overhead due to creating a new fact, though this is usually negligible.

Conclusion

    Use variables when you need fixed, unchanging values throughout the playbook or when you want to keep your playbook simpler.
    Use set_fact when you need to modify values dynamically during playbook execution or when the value depends on the outcome of previous tasks.

If your task file name is always known at the start of the playbook and does not change, using a variable defined at the beginning might be sufficient. However, if the task file name may change based on certain conditions, using set_fact would be the more appropriate choice.


# --------------------------------------------------------------------------------
#-- P07  - How to use set_fact module

- name: Setting host facts using key=value pairs, this format can only create strings or booleans
  ansible.builtin.set_fact: one_fact="something" other_fact="{{ local_var }}"

- name: Setting host facts using complex arguments
  ansible.builtin.set_fact:
    one_fact: something
    other_fact: "{{ local_var * 2 }}"
    another_fact: "{{ some_registered_var.results | map(attribute='ansible_facts.some_fact') | list }}"

- name: Setting facts so that they will be persisted in the fact cache
  ansible.builtin.set_fact:
    one_fact: something
    other_fact: "{{ local_var * 2 }}"
    cacheable: yes

- name: Creating list and dictionary variables
  ansible.builtin.set_fact:
    one_dict:
        something: here
        other: there
    one_list:
        - a
        - b
        - c
# As of Ansible 1.8, Ansible will convert boolean strings ('true', 'false', 'yes', 'no')
# to proper boolean values when using the key=value syntax, however it is still
# recommended that booleans be set using the complex argument style:
- name: Setting booleans using complex argument style
  ansible.builtin.set_fact:
    one_fact: yes
    other_fact: no

- name: Creating list and dictionary variables using 'shorthand' YAML
  ansible.builtin.set_fact:
    two_dict: {'something': here2, 'other': somewhere}
    two_list: [1,2,3]

# --------------------------------------------------------------------------------
#-- P08  - Debugging

- name: Debug - Checkpoint
  debug:
    msg: "Reached checkpoint {{ checkpoint_name }}"
  vars:
    checkpoint_name: "SCP-FINISHED"


# --------------------------------------------------------------------------------

#-- P09  - Using the vars dir in the role

# refer to server_configure/tasks/apt_pkgs_tasks.yml - "{{ tasks_file_name }} | Install various packages using variable defined in var directory"


# --------------------------------------------------------------------------------

#-- P10  - Using jinja templates
# refer to server_configure/tasks/file_management.yml - "FM-20 - Create an nginx config file using a jinja template file"

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------


