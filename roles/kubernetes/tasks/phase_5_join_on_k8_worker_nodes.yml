---

# --------------------------------------------------------------------------------
# steps to do on *ONLY* on worker nodes, do on EACH of these worker nodes
#
# --------------------------------------------------------------------------------

- hosts: k8s_nodes_worker
  become: yes
  #gather_facts: false
  tasks:

    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

    - name: TCP port 6443 on master is reachable from worker
      wait_for: "host={{ hostvars['k8s-master-1']['ansible_default_ipv4']['address'] }} port=6443 timeout=1"

    - name: join cluster
      shell: "{{ hostvars['k8s-master-1'].join_command }} >> node_joined.log"
      args:
        chdir: $HOME
        creates: node_joined.log




#kubeadm join            ( make sure to run with --v=5)
#  i think i need to RUN AS sudo
#  took around 6 mins to complete
#  verify by looking into output and it will say node has joined the cluster

# if we forget the token, then can do below on the CONTROL node to get it - 
# https://ystatit.medium.com/regenerate-kubernetes-join-command-to-join-work-node-7eeb5d1f5787
$ kubeadm token list
TOKEN                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS
cmj1va.e532lu8n1s4sy21e   21h         2024-05-20T11:39:14Z   authentication,signing   The default bootstrap token generated by 'kubeadm init'.   system:bootstrappers:kubeadm:default-node-token

# remember to run as sudo and with verbose
$ sudo kubeadm join 172.31.124.136:6443 --token cmj1va.e532lu8n1s4sy21e \
        --discovery-token-ca-cert-hash sha256:3cc042ce0db5e89617b78716b4f59660810c49664876a2a28edf2dedb92f3ebc --v=5
[sudo] password for cloud_user:
I0519 14:13:36.153716    9961 join.go:412] [preflight] found NodeName empty; using OS hostname as NodeName
I0519 14:13:36.169856    9961 initconfiguration.go:117] detected and using CRI socket: unix:///var/run/containerd/containerd.sock
[preflight] Running pre-flight checks
I0519 14:13:36.171686    9961 preflight.go:93] [preflight] Running general checks
I0519 14:13:36.171901    9961 checks.go:280] validating the existence of file /etc/kubernetes/kubelet.conf
I0519 14:13:36.171945    9961 checks.go:280] validating the existence of file /etc/kubernetes/bootstrap-kubelet.conf
I0519 14:13:36.171980    9961 checks.go:104] validating the container runtime
I0519 14:13:40.987006    9961 checks.go:639] validating whether swap is enabled or not
I0519 14:13:40.987170    9961 checks.go:370] validating the presence of executable crictl
I0519 14:13:40.987227    9961 checks.go:370] validating the presence of executable conntrack
I0519 14:13:40.987313    9961 checks.go:370] validating the presence of executable ip
I0519 14:13:40.987367    9961 checks.go:370] validating the presence of executable iptables
I0519 14:13:40.987428    9961 checks.go:370] validating the presence of executable mount                                                                                                      I0519 14:13:40.987490    9961 checks.go:370] validating the presence of executable nsenter
I0519 14:13:40.987563    9961 checks.go:370] validating the presence of executable ebtables
I0519 14:13:40.987684    9961 checks.go:370] validating the presence of executable ethtool
I0519 14:13:40.987742    9961 checks.go:370] validating the presence of executable socat
I0519 14:13:40.987890    9961 checks.go:370] validating the presence of executable tc
I0519 14:13:40.987965    9961 checks.go:370] validating the presence of executable touch
I0519 14:13:40.988012    9961 checks.go:516] running all checks
I0519 14:13:41.010716    9961 checks.go:401] checking whether the given node name is valid and reachable using net.LookupHost
I0519 14:13:41.016068    9961 checks.go:605] validating kubelet version
I0519 14:13:41.096136    9961 checks.go:130] validating if the "kubelet" service is enabled and active
I0519 14:13:41.116495    9961 checks.go:203] validating availability of port 10250
I0519 14:13:41.116783    9961 checks.go:280] validating the existence of file /etc/kubernetes/pki/ca.crt
I0519 14:13:41.116832    9961 checks.go:430] validating if the connectivity type is via proxy or direct
I0519 14:13:41.116888    9961 checks.go:329] validating the contents of file /proc/sys/net/bridge/bridge-nf-call-iptables
I0519 14:13:41.117033    9961 checks.go:329] validating the contents of file /proc/sys/net/ipv4/ip_forward
I0519 14:13:41.117082    9961 join.go:529] [preflight] Discovering cluster-info
I0519 14:13:41.117125    9961 token.go:80] [discovery] Created cluster-info discovery client, requesting info from "172.31.124.136:6443"
I0519 14:13:41.578134    9961 token.go:118] [discovery] Requesting info from "172.31.124.136:6443" again to validate TLS against the pinned public key
I0519 14:13:41.588505    9961 token.go:135] [discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server "172.31.124.136:6443"
I0519 14:13:41.588549    9961 discovery.go:52] [discovery] Using provided TLSBootstrapToken as authentication credentials for the join process
I0519 14:13:41.588624    9961 join.go:543] [preflight] Fetching init configuration
I0519 14:13:41.588647    9961 join.go:589] [preflight] Retrieving KubeConfig objects
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
I0519 14:13:41.597392    9961 kubelet.go:74] attempting to download the KubeletConfiguration from ConfigMap "kubelet-config"
I0519 14:13:41.602303    9961 interface.go:432] Looking for default routes with IPv4 addresses
I0519 14:13:41.602337    9961 interface.go:437] Default route transits interface "ens5"
I0519 14:13:41.602813    9961 interface.go:209] Interface ens5 is up
I0519 14:13:41.602932    9961 interface.go:257] Interface "ens5" has 3 addresses :[172.31.116.248/20 2a05:d018:85:e101:40e6:f3d7:385a:5b6c/128 fe80::5a:3eff:fe04:7b79/64].
I0519 14:13:41.603098    9961 interface.go:224] Checking addr  172.31.116.248/20.
I0519 14:13:41.603124    9961 interface.go:231] IP found 172.31.116.248
I0519 14:13:41.603155    9961 interface.go:263] Found valid IPv4 address 172.31.116.248 for interface "ens5".
I0519 14:13:41.603181    9961 interface.go:443] Found active IP 172.31.116.248
I0519 14:13:41.609769    9961 preflight.go:104] [preflight] Running configuration dependant checks
I0519 14:13:41.609922    9961 controlplaneprepare.go:225] [download-certs] Skipping certs download
I0519 14:13:41.609954    9961 kubelet.go:121] [kubelet-start] writing bootstrap kubelet config file at /etc/kubernetes/bootstrap-kubelet.conf
I0519 14:13:41.610693    9961 kubelet.go:136] [kubelet-start] writing CA certificate at /etc/kubernetes/pki/ca.crt
I0519 14:13:41.611448    9961 kubelet.go:157] [kubelet-start] Checking for an existing Node in the cluster with name "acg-worker2" and status "Ready"
I0519 14:13:41.617441    9961 kubelet.go:172] [kubelet-start] Stopping the kubelet
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
I0519 14:13:44.223237    9961 cert_rotation.go:137] Starting client certificate rotation controller
I0519 14:13:44.224894    9961 kubelet.go:220] [kubelet-start] preserving the crisocket information for the node
I0519 14:13:44.274678    9961 patchnode.go:31] [patchnode] Uploading the CRI Socket information "unix:///var/run/containerd/containerd.sock" to the Node API object "acg-worker2" as an annotation

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

#--------------------------------------------------------------------------------
# verify
$ kubectl get nodes
NAME           STATUS   ROLES           AGE     VERSION
acg-control1   Ready    control-plane   157m    v1.28.10
acg-worker1    Ready    <none>          6m8s    v1.28.10
acg-worker2    Ready    <none>          2m30s   v1.28.10

# run this join on ALL the remaining WORKER nodes

# get the cluster info
$ kubectl cluster-info
Kubernetes control plane is running at https://172.31.124.136:6443
CoreDNS is running at https://172.31.124.136:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

# check listening on control-plane
sudo ss -tulpn | egrep "10250|6443|2379|2380|10259|10257"

# check listening on worker nodes
sudo ss -tulpn | egrep "10250"

# --------------------------------------------------------------------------------

# In terms of processes, we will see below on control node - 
etcd
kube-apiserver
kubelet
kube-proxy
kube-scheduler
kube-controllers
# below on worker nodes -
kubelet
kube-proxy









# --------------------------------------------------------------------------------





