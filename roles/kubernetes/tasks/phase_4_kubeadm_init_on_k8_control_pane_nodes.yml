---
#--------------------------------------------------------------------------------
#phase 4 -  steps to do on *ONLY* on control pane
# that too only on 1 control plane and not the rest, if we have any
# on the rest of control panes, we will run the join as master later on
#
# configuring cluster using kubeadm
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/

#--------------------------------------------------------------------------------

- hosts: k8s_nodes_control
  become: true

  tasks:

# just copy pasted from various blogs, but not tested many of the ansible tasks for this phase
# as need to store the output of init and do properly and did not get time for all

    - name: configuring the container runtime including its cgroup driver
      blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
             kind: ClusterConfiguration
             apiVersion: kubeadm.k8s.io/v1beta3
             networking:
               podSubnet: "10.244.0.0/16"
             ---
             kind: KubeletConfiguration
             apiVersion: kubelet.config.k8s.io/v1beta1
             runtimeRequestTimeout: "15m"
             cgroupDriver: "systemd"
             systemReserved:
               cpu: 100m
               memory: 350M
             kubeReserved:
               cpu: 100m
               memory: 50M
             enforceNodeAllocatable:
             - pods

#--------------------------------------------------------------------------------


#--------------------------------------------------------------------------------
# step 1 - init using kubeadm

    - name: initialize the cluster (this could take some time)
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml >> cluster_initialized.log
      args:
        chdir: /home/ubuntu
        creates: cluster_initialized.log

    - name: initialize the cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

#
# before u do init, i need to finalize which CNI i will be using so that i make sure the pod network cidr for that CNI does NOT clash with my local subnet.
# my local nodes are all ACloudGuru that runs on AWS and are on ens5 interface of 172.31.X.X subnet
# so i chose calico which has a pod network cidr of 192.168.0.0/16 and so will not clash
# which means all PODS will have 192.168.X.X IP address and all NODES will have the 172.31.X.X IP addresses
# also note that when SERVICES are created, they will have 10.X.X.X IP addresses under CLUSTER-IP

#$ kubeadm version
#kubeadm version: &version.Info{Major:"1", Minor:"28", GitVersion:"v1.28.10", GitCommit:"21be1d76a90bc00e2b0f6676a664bdf097224155", GitTreeState:"clean", BuildDate:"2024-05-14T10:51:30Z", GoVersion:"go1.21.9", Compiler:"gc", Platform:"linux/amd64"}


#kubeadm init    (and do with --v=5)
# other example ways - 
#   sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=172.31.100.23 --v=5      # where advertise address in the private ip of the control plane node
#   sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version 1.26.0 --v=5   (this one i did for 1.26 version worked on 07-May-2023, best to use this version for now)
#   --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem  # this will allow us to ignore errors if our nodes have less mem or cpu


# https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --v=5
[sudo] password for cloud_user:
I0519 11:38:23.040627    2688 initconfiguration.go:117] detected and using CRI socket: unix:///var/run/containerd/containerd.sock
I0519 11:38:23.045807    2688 interface.go:432] Looking for default routes with IPv4 addresses
I0519 11:38:23.045855    2688 interface.go:437] Default route transits interface "ens5"
I0519 11:38:23.046150    2688 interface.go:209] Interface ens5 is up
I0519 11:38:23.046290    2688 interface.go:257] Interface "ens5" has 3 addresses :[172.31.124.136/20 2a05:d018:85:e101:785d:7e4c:db19:78eb/128 fe80::8c:6fff:feb8:89ed/64].
I0519 11:38:23.046322    2688 interface.go:224] Checking addr  172.31.124.136/20.
I0519 11:38:23.046343    2688 interface.go:231] IP found 172.31.124.136
I0519 11:38:23.046380    2688 interface.go:263] Found valid IPv4 address 172.31.124.136 for interface "ens5".
I0519 11:38:23.046399    2688 interface.go:443] Found active IP 172.31.124.136
I0519 11:38:23.046435    2688 kubelet.go:196] the value of KubeletConfiguration.cgroupDriver is empty; setting it to "systemd"
I0519 11:38:23.166705    2688 version.go:187] fetching Kubernetes version from URL: https://dl.k8s.io/release/stable-1.txt
I0519 11:38:23.630498    2688 version.go:256] remote version is much newer: v1.30.1; falling back to: stable-1.28
I0519 11:38:23.630561    2688 version.go:187] fetching Kubernetes version from URL: https://dl.k8s.io/release/stable-1.28.txt
[init] Using Kubernetes version: v1.28.10
[preflight] Running pre-flight checks
I0519 11:38:23.894203    2688 checks.go:563] validating Kubernetes and kubeadm version
I0519 11:38:23.894251    2688 checks.go:168] validating if the firewall is enabled and active
I0519 11:38:23.908570    2688 checks.go:203] validating availability of port 6443
I0519 11:38:23.908854    2688 checks.go:203] validating availability of port 10259
I0519 11:38:23.908924    2688 checks.go:203] validating availability of port 10257
I0519 11:38:23.908998    2688 checks.go:280] validating the existence of file /etc/kubernetes/manifests/kube-apiserver.yaml
I0519 11:38:23.909572    2688 checks.go:280] validating the existence of file /etc/kubernetes/manifests/kube-controller-manager.yaml
I0519 11:38:23.909619    2688 checks.go:280] validating the existence of file /etc/kubernetes/manifests/kube-scheduler.yaml
I0519 11:38:23.909747    2688 checks.go:280] validating the existence of file /etc/kubernetes/manifests/etcd.yaml
I0519 11:38:23.909910    2688 checks.go:430] validating if the connectivity type is via proxy or direct
I0519 11:38:23.909993    2688 checks.go:469] validating http connectivity to first IP address in the CIDR
I0519 11:38:23.910078    2688 checks.go:469] validating http connectivity to first IP address in the CIDR
I0519 11:38:23.910098    2688 checks.go:104] validating the container runtime
I0519 11:38:29.313558    2688 checks.go:639] validating whether swap is enabled or not
I0519 11:38:29.313850    2688 checks.go:370] validating the presence of executable crictl
I0519 11:38:29.313913    2688 checks.go:370] validating the presence of executable conntrack
I0519 11:38:29.314000    2688 checks.go:370] validating the presence of executable ip
I0519 11:38:29.314039    2688 checks.go:370] validating the presence of executable iptables
I0519 11:38:29.314082    2688 checks.go:370] validating the presence of executable mount
I0519 11:38:29.314136    2688 checks.go:370] validating the presence of executable nsenter
I0519 11:38:29.314213    2688 checks.go:370] validating the presence of executable ebtables
I0519 11:38:29.314345    2688 checks.go:370] validating the presence of executable ethtool
I0519 11:38:29.314412    2688 checks.go:370] validating the presence of executable socat
I0519 11:38:29.314478    2688 checks.go:370] validating the presence of executable tc
I0519 11:38:29.314546    2688 checks.go:370] validating the presence of executable touch
I0519 11:38:29.314593    2688 checks.go:516] running all checks
I0519 11:38:29.338425    2688 checks.go:401] checking whether the given node name is valid and reachable using net.LookupHost
I0519 11:38:29.338495    2688 checks.go:605] validating kubelet version
I0519 11:38:29.412316    2688 checks.go:130] validating if the "kubelet" service is enabled and active
I0519 11:38:29.709265    2688 checks.go:203] validating availability of port 10250
I0519 11:38:29.709510    2688 checks.go:329] validating the contents of file /proc/sys/net/bridge/bridge-nf-call-iptables
I0519 11:38:29.709596    2688 checks.go:329] validating the contents of file /proc/sys/net/ipv4/ip_forward
I0519 11:38:29.709712    2688 checks.go:203] validating availability of port 2379
I0519 11:38:29.709787    2688 checks.go:203] validating availability of port 2380
I0519 11:38:29.709855    2688 checks.go:243] validating the existence and emptiness of directory /var/lib/etcd
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0519 11:38:29.710027    2688 checks.go:828] using image pull policy: IfNotPresent
I0519 11:38:29.939731    2688 checks.go:854] pulling: registry.k8s.io/kube-apiserver:v1.28.10
I0519 11:38:34.814326    2688 checks.go:854] pulling: registry.k8s.io/kube-controller-manager:v1.28.10
I0519 11:38:38.103742    2688 checks.go:854] pulling: registry.k8s.io/kube-scheduler:v1.28.10
I0519 11:38:40.469430    2688 checks.go:854] pulling: registry.k8s.io/kube-proxy:v1.28.10
W0519 11:38:43.089699    2688 checks.go:835] detected that the sandbox image "registry.k8s.io/pause:3.6" of the container runtime is inconsistent with that used by kubeadm. It is recommended that using "registry.k8s.io/pause:3.9" as the CRI sandbox image.
I0519 11:38:43.121539    2688 checks.go:854] pulling: registry.k8s.io/pause:3.9
I0519 11:38:44.102043    2688 checks.go:854] pulling: registry.k8s.io/etcd:3.5.12-0
I0519 11:38:51.523369    2688 checks.go:854] pulling: registry.k8s.io/coredns/coredns:v1.10.1
[certs] Using certificateDir folder "/etc/kubernetes/pki"
I0519 11:38:52.925491    2688 certs.go:112] creating a new certificate authority for ca
[certs] Generating "ca" certificate and key
I0519 11:38:53.212634    2688 certs.go:519] validating certificate period for ca certificate
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [acg-control1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.124.136]
[certs] Generating "apiserver-kubelet-client" certificate and key
I0519 11:38:53.536059    2688 certs.go:112] creating a new certificate authority for front-proxy-ca
[certs] Generating "front-proxy-ca" certificate and key
I0519 11:38:53.700881    2688 certs.go:519] validating certificate period for front-proxy-ca certificate
[certs] Generating "front-proxy-client" certificate and key
I0519 11:38:53.943091    2688 certs.go:112] creating a new certificate authority for etcd-ca
[certs] Generating "etcd/ca" certificate and key
I0519 11:38:54.041042    2688 certs.go:519] validating certificate period for etcd/ca certificate
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [acg-control1 localhost] and IPs [172.31.124.136 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [acg-control1 localhost] and IPs [172.31.124.136 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
I0519 11:38:55.836843    2688 certs.go:78] creating new public/private key files for signing service account users
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0519 11:38:55.917788    2688 kubeconfig.go:103] creating kubeconfig file for admin.conf
[kubeconfig] Writing "admin.conf" kubeconfig file
I0519 11:38:56.062478    2688 kubeconfig.go:103] creating kubeconfig file for kubelet.conf
[kubeconfig] Writing "kubelet.conf" kubeconfig file
I0519 11:38:56.872993    2688 kubeconfig.go:103] creating kubeconfig file for controller-manager.conf
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0519 11:38:57.459956    2688 kubeconfig.go:103] creating kubeconfig file for scheduler.conf
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0519 11:38:57.741496    2688 local.go:65] [etcd] wrote Static Pod manifest for a local etcd member to "/etc/kubernetes/manifests/etcd.yaml"
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
I0519 11:38:57.741567    2688 manifests.go:102] [control-plane] getting StaticPodSpecs
I0519 11:38:57.741955    2688 certs.go:519] validating certificate period for CA certificate
I0519 11:38:57.742070    2688 manifests.go:128] [control-plane] adding volume "ca-certs" for component "kube-apiserver"
I0519 11:38:57.742114    2688 manifests.go:128] [control-plane] adding volume "etc-ca-certificates" for component "kube-apiserver"
I0519 11:38:57.742143    2688 manifests.go:128] [control-plane] adding volume "etc-pki" for component "kube-apiserver"
I0519 11:38:57.742168    2688 manifests.go:128] [control-plane] adding volume "k8s-certs" for component "kube-apiserver"
I0519 11:38:57.742193    2688 manifests.go:128] [control-plane] adding volume "usr-local-share-ca-certificates" for component "kube-apiserver"
I0519 11:38:57.742210    2688 manifests.go:128] [control-plane] adding volume "usr-share-ca-certificates" for component "kube-apiserver"
I0519 11:38:57.743517    2688 manifests.go:157] [control-plane] wrote static Pod manifest for component "kube-apiserver" to "/etc/kubernetes/manifests/kube-apiserver.yaml"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
I0519 11:38:57.743560    2688 manifests.go:102] [control-plane] getting StaticPodSpecs
I0519 11:38:57.743890    2688 manifests.go:128] [control-plane] adding volume "ca-certs" for component "kube-controller-manager"
I0519 11:38:57.743925    2688 manifests.go:128] [control-plane] adding volume "etc-ca-certificates" for component "kube-controller-manager"
I0519 11:38:57.743939    2688 manifests.go:128] [control-plane] adding volume "etc-pki" for component "kube-controller-manager"
I0519 11:38:57.743967    2688 manifests.go:128] [control-plane] adding volume "flexvolume-dir" for component "kube-controller-manager"
I0519 11:38:57.743994    2688 manifests.go:128] [control-plane] adding volume "k8s-certs" for component "kube-controller-manager"
I0519 11:38:57.744019    2688 manifests.go:128] [control-plane] adding volume "kubeconfig" for component "kube-controller-manager"
I0519 11:38:57.744044    2688 manifests.go:128] [control-plane] adding volume "usr-local-share-ca-certificates" for component "kube-controller-manager"
I0519 11:38:57.744057    2688 manifests.go:128] [control-plane] adding volume "usr-share-ca-certificates" for component "kube-controller-manager"
I0519 11:38:57.745236    2688 manifests.go:157] [control-plane] wrote static Pod manifest for component "kube-controller-manager" to "/etc/kubernetes/manifests/kube-controller-manager.yaml"
[control-plane] Creating static Pod manifest for "kube-scheduler"
I0519 11:38:57.745276    2688 manifests.go:102] [control-plane] getting StaticPodSpecs
I0519 11:38:57.745583    2688 manifests.go:128] [control-plane] adding volume "kubeconfig" for component "kube-scheduler"
I0519 11:38:57.749189    2688 manifests.go:157] [control-plane] wrote static Pod manifest for component "kube-scheduler" to "/etc/kubernetes/manifests/kube-scheduler.yaml"
I0519 11:38:57.749243    2688 kubelet.go:67] Stopping the kubelet
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
I0519 11:38:58.196934    2688 waitcontrolplane.go:83] [wait-control-plane] Waiting for the API server to be healthy
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 15.005428 seconds
I0519 11:39:13.681346    2688 uploadconfig.go:112] [upload-config] Uploading the kubeadm ClusterConfiguration to a ConfigMap
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0519 11:39:13.722538    2688 uploadconfig.go:126] [upload-config] Uploading the kubelet component config to a ConfigMap
[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0519 11:39:13.780385    2688 uploadconfig.go:131] [upload-config] Preserving the CRISocket information for the control-plane node
I0519 11:39:13.780418    2688 patchnode.go:31] [patchnode] Uploading the CRI Socket information "unix:///var/run/containerd/containerd.sock" to the Node API object "acg-control1" as an annotation
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node acg-control1 as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node acg-control1 as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]
[bootstrap-token] Using token: cmj1va.e532lu8n1s4sy21e
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0519 11:39:14.963704    2688 clusterinfo.go:47] [bootstrap-token] loading admin kubeconfig
I0519 11:39:14.964605    2688 clusterinfo.go:58] [bootstrap-token] copying the cluster from admin.conf to the bootstrap kubeconfig
I0519 11:39:14.964913    2688 clusterinfo.go:70] [bootstrap-token] creating/updating ConfigMap in kube-public namespace
I0519 11:39:14.974836    2688 clusterinfo.go:84] creating the RBAC rules for exposing the cluster-info ConfigMap in the kube-public namespace
I0519 11:39:15.012230    2688 kubeletfinalize.go:90] [kubelet-finalize] Assuming that kubelet client certificate rotation is enabled: found "/var/lib/kubelet/pki/kubelet-client-current.pem"
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0519 11:39:15.013577    2688 kubeletfinalize.go:134] [kubelet-finalize] Restarting the kubelet to enable client certificate rotation
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.124.136:6443 --token cmj1va.e532lu8n1s4sy21e \
        --discovery-token-ca-cert-hash sha256:3cc042ce0db5e89617b78716b4f59660810c49664876a2a28edf2dedb92f3ebc
cloud_user@acg-control1:~
$

# higlights of the above init output -
#  save the kubeadm join command info into a text file for LATER (will need to run it on the worker nodes) and make sure to RUN IT AS SUDO
#  does a bunch of validations
#  creates a bunch of certificates for various k8s components in /etc/kubernetes/*.conf
#  creates the manifest files for the components in /etc/kubernetes/manifests/*.yml
#  creates kubelet config file - /var/lib/kubelet/config.yaml
#  stops and restarts the kubelet process
#  we will see kubelet log in syslog change its error message to now say "Container runtime network not ready"
#  the 2 coredns pods under kube-system will be in pending status as CNI is not yet installed
#  various RBAC rules created for this node


#--------------------------------------------------------------------------------
# step 2 - copy the k8s config file locally

   mkdir -p $HOME/.kube
   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   sudo chown $(id -u):$(id -g) $HOME/.kube/config


    - name: create .kube directory
      become: true
      become_user: cloud_user                              # need to understand this
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: cloud_user


#--------------------------------------------------------------------------------
# step 3 - install the pod network add-on  (CNI)

- name: Configuring Flannel CNI for K8S Master
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
  register: flannel
- debug:
        var: flannel

- name: Generating Token
  shell: "kubeadm token  create  --print-join-command"
  register: tokens
  ignore_errors: yes
- debug: 
    var: tokens.stdout_lines

# i have chosen calico
# https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart
# https://docs.tigera.io/calico/latest/getting-started/kubernetes/requirements

    - name: install Pod network
      become: yes
      become_user: ubuntu
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.txt
      args:
        chdir: $HOME
        creates: pod_network_setup.txt

# Install the Tigera Calico operator and custom resource definitions.
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
namespace/tigera-operator created
customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/bgpfilters.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/caliconodestatuses.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/ipreservations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created
customresourcedefinition.apiextensions.k8s.io/apiservers.operator.tigera.io created
customresourcedefinition.apiextensions.k8s.io/imagesets.operator.tigera.io created
customresourcedefinition.apiextensions.k8s.io/installations.operator.tigera.io created
customresourcedefinition.apiextensions.k8s.io/tigerastatuses.operator.tigera.io created
serviceaccount/tigera-operator created
clusterrole.rbac.authorization.k8s.io/tigera-operator created
clusterrolebinding.rbac.authorization.k8s.io/tigera-operator created
deployment.apps/tigera-operator created

# Install Calico by creating the necessary custom resource
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml
installation.operator.tigera.io/default created
apiserver.operator.tigera.io/default created

# wait till all calico pods show Running status - 
# it might take 10 mins even to show these all as running
$ kubectl get pods -n calico-system -o wide
NAME                                      READY   STATUS    RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES
calico-kube-controllers-667d7f444-8vrvx   1/1     Running   0          17m   192.168.16.4     acg-control1   <none>           <none>
calico-node-4h4k4                         1/1     Running   0          17m   172.31.124.136   acg-control1   <none>           <none>
calico-typha-7fcd7bc696-wcqmk             1/1     Running   0          17m   172.31.124.136   acg-control1   <none>           <none>
csi-node-driver-8t6b6                     2/2     Running   0          17m   192.168.16.2     acg-control1   <none>           <none>

# below network interface will be seen (not sure if it was after kubeadm init or now)
#3: vxlan.calico    inet 192.168.16.0/32 scope global vxlan.calico\       valid_lft forever preferred_lft forever

# We should now see the node status as "Ready"
$ kubectl get nodes -o wide
NAME           STATUS   ROLES           AGE    VERSION    INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION   CONTAINER-RUNTIME
acg-control1   Ready    control-plane   107m   v1.28.10   172.31.124.136   <none>        Ubuntu 22.04.4 LTS   6.5.0-1020-aws   containerd://1.6.31

# Remove Control plane node isolation  (ie REMOVE taint)
# By default, your cluster will not schedule Pods on the control plane nodes for security reasons. If you want to be able to schedule Pods on the control plane nodes - 
$ kubectl taint nodes --all node-role.kubernetes.io/control-plane-
node/acg-control1 untainted

$ kubectl describe node | egrep "Name:|Taints"
Name:               acg-control1
Taints:             <none>
$ kubectl get nodes -o custom-columns=NAME:metadata.name,TAINT:spec.taints[].effect,KEY:spec.taints[].key,VALUE:spec.taints[*].value
NAME           TAINT    KEY      VALUE
acg-control1   <none>   <none>   <none>

$ kubectl cluster-info
Kubernetes control plane is running at https://172.31.124.136:6443
CoreDNS is running at https://172.31.124.136:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
cloud_user@acg-control1:~
$

#--------------------------------------------------------------------------------

# TO REVIEW
some documentation also mentions we need to open firewall for calico ports - 
https://www.linuxtechi.com/install-kubernetes-cluster-on-debian/
below need to be done on ALL nodes
# https://docs.tigera.io/calico/latest/getting-started/kubernetes/requirements
sudo ufw allow 179/tcp    comment "Calico networking (BGP)"
sudo ufw allow 4789/udp   comment "Calico networking with VXLAN enabled"
sudo ufw allow 51820/udp  comment "Calico networking with IPv4 Wireguard enabled"
sudo ufw allow 51821/udp  comment "Calico networking with IPv6 Wireguard enabled"


--------------------------------------------------------------------------------








