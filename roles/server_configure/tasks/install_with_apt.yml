---

# need to make sure first (using apt list pkg -a) if that version is available to install on this OS
#- name: apt install and/or ensure php8.1 is installed - specific version
#  apt:
#    name: php8.1
#    #name: php8.1i=8.1+92ubuntu1
#    state: present
#    update_cache: true
#  become: true

# lot of this taken from -     https://www.toptechskills.com/ansible-tutorials-courses/ansible-apt-module-tutorial-examples/


- name: apt install multiple packages
  apt:
    name:
      - php8.1
      - vim 
    state: present
    update_cache: true
  become: true

- name: ensure specific version of php7.2 is installed
  apt:
    name: php7.2=7.2.10-0ubuntu0.18.04.1
    state: present
    update_cache: true
  become: true

- name: install php7.2 from a .deb on the internet
  apt:
    deb: http://security.ubuntu.com/ubuntu/pool/main/p/php7.2/php7.2_7.2.10-0ubuntu0.18.04.1_all.deb
    state: present
  become: true
  register: apt_output
  when: ansible_os_family == 'Debian'

- name: ensure nginx is uninstalled/not installed and autoremove unneeded deps
  apt:
    name: nginx
    state: absent
    autoremove: true
  become: true

- name: ensure latest versions of php7.2 and php7.2-mysql are installed / update packages to their latest versions
  apt:
    name: 
      - php7.2
      - php7.2-mysql
    state: latest
    update_cache: true
  become: true

- name: update all packages installed on the system
  apt:
    name: "*"
    state: latest
    force_apt_get: true
    update_cache: true
  become: true

# how to downgrade
# downgrade a package by first fully removing the package, then installing a specific previous version of the package
- name: ensure php7.2 is not installed
  apt:
    name: php7.2
    state: absent
    autoremove: true
  become: true

- name: ensure older version of php7.2 is installed
  apt:
    name: php7.2=7.2.3-1ubuntu1
    state: present
    update_cache: true
  become: true

- name: clean up the apt cache
  apt:
    autoclean: true
  become: true

- name: automatically remove any unused dependencies
  apt:
    autoremove: true
  become: true

# to capture apt module output
- name: ensure php7.2 is installed
  apt:
    name: php7.2
    state: present
    update_cache: true
  become: true
  register: apt_output

- debug: var=apt_output

#- name: install redis on Debian based distros 
#  apt:
#    name: redis-server
#    state: present
#    update_cache: true
#  become: true
#  when: ansible_os_family == 'Debian'
#
#- name: install redis on RHEL based distros
#  yum:
#    name: "{{ item }}"
#    state: present
#    update_cache: true
#  become: true
#  loop:
#    - epel-release
#    - redis
#  when: ansible_os_family == 'RedHat'
#

# check https://www.digitalocean.com/community/tutorials/how-to-create-a-kubernetes-cluster-using-kubeadm-on-ubuntu-20-04  for apt_key and apt_repository tasks and others
# https://github.com/netson/ansible-gpg-key
# https://www.toptechskills.com/ansible-tutorials-courses/ansible-apt_key-module-tutorial-examples/


